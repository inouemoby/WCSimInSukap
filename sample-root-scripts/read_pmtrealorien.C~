#include "TFile.h"
#include "TTree.h"
#include "TH1F.h"
#include "TCanvas.h"
#include "TSystem.h"
#include "TLorentzVector.h"

void read_pmtrealorien(const char* filename = "../rootfile/wcsim_output.root")
{
    //define parameter
    //int startID = 1;

    char* wcsimdirenv;
    wcsimdirenv = getenv("WCSIMDIR");
    if(wcsimdirenv !=  NULL){
        gSystem->Load("${WCSIMDIR}/libWCSimRoot.so");
    }else{
        gSystem->Load("../libWCSimRoot.so");
    }

    // 打开ROOT文件
    TFile *file = TFile::Open(filename);
    if (!file || file->IsZombie())
    {
        // 处理无法打开文件的情况
        return;
    }

    // 获取TTree "wcsimT"
    TTree *tree = (TTree*)file->Get("wcsimT");
    if (!tree)
    {
        // 处理找不到"wcsimT"的情况
        file->Close();
        return;
    }

	WCSimRootEvent *wcsimrootsuperevent = new WCSimRootEvent();
	tree->SetBranchAddress("wcsimrootevent", &wcsimrootsuperevent);
	
	WCSimRootGeom *geo = 0;
	TTree *geotree = (TTree*)file->Get("wcsimGeoT");
	geotree->SetBranchAddress("wcsimrootgeom", &geo);
	geotree->GetEntry(0);

	int numPMTs = geo->GetWCNumPMT();

	TH1F *angleHist = new TH1F("Angle", "PMT Angle Distribution with Electron", 90, 0, 90);

	angleHist->GetXaxis()->SetTitle("Angle [degree]");
	angleHist->GetYaxis()->SetTitle("Number of PMTs");

	for (int i = 0; i < tree->GetEntries(); ++i)
	{
		tree->GetEntry(i);

		// 获取WCSimRootTrigger对象，该对象包含每个事件的track信息
		WCSimRootTrigger *wcsimrootevent = wcsimrootsuperevent->GetTrigger(0);

		// 获取 WCSimRootTrack 列表
		TClonesArray *trackArray = wcsimrootevent->GetTracks();

		TLorentzVector electronPosition(0, 0, 0, 0); 

		// 遍历每个 track，找到第一次出现电子的位置
		for (int j = 0; j < trackArray->GetEntries(); ++j)
		{
			WCSimRootTrack *track = (WCSimRootTrack*)trackArray->At(j);

			if (track->GetIpnu() == 11) // 如果这是一个电子
			{
				electronPosition.SetXYZT(track->GetStart(0), track->GetStart(1), track->GetStart(2), 0);
				break; // 只记录第一次出现电子的位置，所以在找到后就跳出循环
			}
		}

	}
                for (int tubeID = 1; tubeID <= numPMTs; ++tubeID)
                {
                        WCSimRootPMT pmtInfo = geo->GetPMT(tubeID - 1);

                        TLorentzVector pmtPosition(pmtInfo.GetPosition(0), pmtInfo.GetPosition(1), pm
tInfo.GetPosition(2), 0);
                        TLorentzVector pmtOrientation(pmtInfo.GetOrientation(0), pmtInfo.GetOrientati
on(1), pmtInfo.GetOrientation(2), 0);

                        TLorentzVector positionVector = pmtPosition - electronPosition;

                        double cosTheta = positionVector.Dot(pmtOrientation) / (positionVector.Vect()
.Mag() * pmtOrientation.Vect().Mag());

                        double angle = TMath::ACos(cosTheta) * TMath::RadToDeg();

                        angleHist->Fill(angle);
                }

	TCanvas *c2 = new TCanvas("c2", "PMT Angle Distribution", 800, 600);
	angleHist->Draw();
	c2->Update();
}
