#include "TFile.h"
#include "TTree.h"
#include "TH1F.h"
#include "TCanvas.h"
#include "TSystem.h"

void read_pmtefficiency(const char* filename = "../rootfile/wcsim_output.root")
{
    char* wcsimdirenv;
    wcsimdirenv = getenv("WCSIMDIR");
    if(wcsimdirenv !=  NULL){
        gSystem->Load("${WCSIMDIR}/libWCSimRoot.so");
    }else{
        gSystem->Load("../libWCSimRoot.so");
    }

    // 打开ROOT文件
    TFile *file = TFile::Open(filename);
    if (!file || file->IsZombie())
    {
        // 处理无法打开文件的情况
        return;
    }

    // 获取TTree "wcsimT"
    TTree *tree = (TTree*)file->Get("wcsimT");
    if (!tree)
    {
        // 处理找不到"wcsimT"的情况
        file->Close();
        return;
    }

    // 声明需要读取的变量
    WCSimRootEvent *wcsimrootsuperevent = new WCSimRootEvent();
    tree->SetBranchAddress("wcsimrootevent", &wcsimrootsuperevent);

    // 创建TH1F来保存每个PMT的电荷/击中次数分布和每个事件的总电荷/击中次数分布
    TH1F *chargePerHitHist = new TH1F("Charge per Hit", "Charge per Hit Distribution", 100, 0, 5);
    TH1F *totalChargePerHitHist = new TH1F("Total Charge per Hit", "Total Charge per Hit Distribution", 100, 0, 2.5);

    // 获取总事件数
    int numEvents = tree->GetEntries();

    // 循环读取每个事件的信息
    for (int i = 0; i < numEvents; ++i)
    {
        tree->GetEntry(i);

        // 获取WCSimRootTrigger对象，该对象包含每个事件的track信息
        WCSimRootTrigger *wcsimrootevent = wcsimrootsuperevent->GetTrigger(0);

        // 获取 WCSimRootCherenkovDigiHit 列表
        TClonesArray *digiHitArray = wcsimrootevent->GetCherenkovDigiHits();

        double totalCharge = 0;
        int totalHits = digiHitArray->GetEntries();

        // 遍历每个 hit，统计每个 PMT 的电荷/击中次数分布和每个事件的总电荷/击中次数分布
        for (int j = 0; j < totalHits; ++j)
        {
            WCSimRootCherenkovDigiHit *digiHit = (WCSimRootCherenkovDigiHit*)digiHitArray->At(j);
            double charge = digiHit->GetQ();
            totalCharge += charge;

            chargePerHitHist->Fill(charge);
        }

        if (totalHits > 0)
        {
            totalChargePerHitHist->Fill(totalCharge / totalHits);
        }
    }

    // 画出两幅直方图
    TCanvas *c1 = new TCanvas("c1", "Charge Distributions", 1200, 600);
    c1->Divide(2, 1); // 将画布分成1行2列

    c1->cd(1); // 切换到第一个子画布
    chargePerHitHist->Draw();

    c1->cd(2); // 切换到第二个子画布
    totalChargePerHitHist->Draw();
}


