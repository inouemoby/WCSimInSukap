#include "TFile.h"
#include "TTree.h"
#include "TH1F.h"
#include "TCanvas.h"
#include "TSystem.h"
#include "TGraph.h"

void read_pmtid20timingmean(const char* filename = "../rootfile/wcsim_output.root")
{
  //define parameter
  int startID = 1;

  char* wcsimdirenv;
    wcsimdirenv = getenv("WCSIMDIR");
    if(wcsimdirenv !=  NULL){
        gSystem->Load("${WCSIMDIR}/libWCSimRoot.so");
    }else{
        gSystem->Load("../libWCSimRoot.so");
    }

    // 打开ROOT文件
    TFile *file = TFile::Open(filename);
    if (!file || file->IsZombie())
    {
        // 处理无法打开文件的情况
        return;
    }

    // 获取TTree "wcsimT"
    TTree *tree = (TTree*)file->Get("wcsimT");
    if (!tree)
    {
        // 处理找不到"wcsimT"的情况
        file->Close();
        return;
    }

    // 声明需要读取的变量
    WCSimRootEvent *wcsimrootsuperevent = new WCSimRootEvent();
    tree->SetBranchAddress("wcsimrootevent", &wcsimrootsuperevent);

    // 创建20个直方图
	TH1F *timingHist[20];
	for (int i = 0; i < 20; ++i) {
	  char histName[10];
		sprintf(histName, "h%d", i+1);
		char histTitle[50];
		sprintf(histTitle, "PMT %d Timing Distribution", startID+i);
	  timingHist[i] = new TH1F(histName, histTitle, 100, 900, 1100);
		timingHist[i]->GetXaxis()->SetTitle("Hit timing [ns]");
	}

	// 获取总事件数
	int numEvents = tree->GetEntries();

	// 循环读取每个事件的信息
	for (int i = 0; i < numEvents; ++i)
	{
		tree->GetEntry(i);

		// 获取WCSimRootTrigger对象，该对象包含每个事件的track信息
		WCSimRootTrigger *wcsimrootevent = wcsimrootsuperevent->GetTrigger(0);

		// 获取 WCSimRootCherenkovDigiHit 列表

		TClonesArray *hitArray = wcsimrootevent->GetCherenkovDigiHits();
		
		// 遍历每个 hit，统计指定tubeID 的timing分布
		for (int j = 0; j < hitArray->GetEntries(); ++j)
		{

			WCSimRootCherenkovDigiHit *hit = (WCSimRootCherenkovDigiHit*)hitArray->At(j);
            int tubeID = hit->GetTubeId();

			if (tubeID >= startID && tubeID < startID + 20) {
				double time = hit->GetT();
				timingHist[tubeID - startID]->Fill(time);
			}
		}
	}

	
	TLorentzVector photonPosition(0, 0, 0, 0); 

	WCSimRootGeom *geo = 0;
	TTree *geotree = (TTree*)file->Get("wcsimGeoT");
	geotree->SetBranchAddress("wcsimrootgeom", &geo);
	geotree->GetEntry(0);

	int numPMTs = geo->GetWCNumPMT();

	//TH1F *angleHist = new TH1F("Angle", "PMT ID vs Angle", numPMTs, 0, numPMTs);
	TH1F *angleHist = new TH1F("Angle", "PMT ID vs Angle", endID - startID, startID, endID);

	angleHist->GetXaxis()->SetTitle("PMT ID");
	angleHist->GetYaxis()->SetTitle("Angle [degree]");

	for (int tubeID = 1; tubeID <= numPMTs; ++tubeID)
	{
        WCSimRootPMT pmtInfo = geo->GetPMT(tubeID - 1);

        TLorentzVector pmtPosition(pmtInfo.GetPosition(0), pmtInfo.GetPosition(1), pmtInfo.GetPosition(2), 0);
        TLorentzVector pmtOrientation(pmtInfo.GetOrientation(0), pmtInfo.GetOrientation(1), pmtInfo.GetOrientation(2), 0);

        TLorentzVector positionVector = pmtPosition - photonPosition;

        double cosTheta = positionVector.Dot(pmtOrientation) / (positionVector.Vect().Mag() * pmtOrientation.Vect().Mag());

        double angle = TMath::ACos(cosTheta) * TMath::RadToDeg();

        angleHist->Fill(tubeID, angle);
	}

	double means[20];
	double ids[20];

	for (int i = 0; i < 20; ++i) {
	    means[i] = timingHist[i]->GetEntry();
	    ids[i] = startID + i;
	    delete timingHist[i]; // delete the histogram after use to save memory
	}

	TCanvas *c2 = new TCanvas("c2", "Timing vs PMT ID", 800, 600);
	TGraph *gr = new TGraph(20, ids, means);
	gr->SetTitle("Timing vs PMT ID");
	gr->GetXaxis()->SetTitle("PMT ID");
	gr->GetYaxis()->SetTitle("Timing [ns]");
	gr->SetMarkerStyle(21);
	gr->GetXaxis()->SetRangeUser(1, 20);
	gr->Draw("AP");

	c2->Update();
}
